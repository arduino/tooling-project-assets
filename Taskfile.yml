version: "3"

vars:
  CLANG_FORMAT_CONFIGURATION_FOLDER: other/clang-format-configuration
  CLANG_FORMAT_CONFIGURATION_PATH: "{{.CLANG_FORMAT_CONFIGURATION_FOLDER}}/.clang-format"
  CLANG_FORMAT_TEST_DATA_FOLDER: "{{.CLANG_FORMAT_CONFIGURATION_FOLDER}}/testdata"
  CLANG_FORMAT_INPUT_TEST_DATA_FOLDER: "{{.CLANG_FORMAT_TEST_DATA_FOLDER}}/input"
  CLANG_FORMAT_TARGETED_INPUT_TEST_DATA_FOLDER: "{{.CLANG_FORMAT_INPUT_TEST_DATA_FOLDER}}/targeted"
  CLANG_FORMAT_GOLDEN_TEST_DATA_FOLDER: "{{.CLANG_FORMAT_TEST_DATA_FOLDER}}/golden"
  # See: https://github.com/arduino/arduino-ide/blob/main/arduino-ide-extension/package.json
  DEFAULT_CLANG_FORMAT_VERSION: 14.0.0

tasks:
  check:
    desc: Check for problems with the project
    deps:
      - task: ci:validate
      - task: clang-format:check-config
      - task: clang-format:check-output
      - task: clang-format:check-testdata
      - task: clang-format:validate
      - task: dependabot:validate
      - task: eslint:validate
      - task: general:check-formatting
      - task: general:check-spelling
      - task: issue-form:validate
      - task: js:lint
      - task: labels:validate
      - task: markdown:check-links
      - task: markdown:lint
      - task: markdownlint:validate
      - task: poetry:validate
      - task: python:lint
      - task: python:test
      - task: shell:check
        vars:
          SCRIPT_PATH: other/installation-script/install.sh
      - task: shell:check-mode
        vars:
          SCRIPT_PATH: other/installation-script/install.sh
      - task: yaml:lint

  fix:
    desc: Make automated corrections to the project's files
    deps:
      - task: ci:sync
      - task: config:sync
      - task: general:correct-spelling
      - task: general:format-prettier
      - task: github:sync
      - task: js:fix
      - task: markdown:fix
      - task: npm:fix-config
      - task: poetry:sync
      - task: python:format
      - task: shell:format
        vars:
          SCRIPT_PATH: other/installation-script/install.sh

  ci:sync:
    desc: Sync CI workflows from templates
    vars:
      WORKFLOWS_PATH: "./.github/workflows"
      WORKFLOW_TEMPLATES_PATH: "./workflow-templates"
    cmds:
      - |
        cp \
          "{{.WORKFLOW_TEMPLATES_PATH}}/check-general-formatting-task.yml" \
          "{{.WORKFLOW_TEMPLATES_PATH}}/check-javascript-task.yml" \
          "{{.WORKFLOW_TEMPLATES_PATH}}/check-markdown-task.yml" \
          "{{.WORKFLOW_TEMPLATES_PATH}}/check-npm-task.yml" \
          "{{.WORKFLOW_TEMPLATES_PATH}}/check-poetry-task.yml" \
          "{{.WORKFLOW_TEMPLATES_PATH}}/check-prettier-formatting-task.yml" \
          "{{.WORKFLOW_TEMPLATES_PATH}}/check-python-task.yml" \
          "{{.WORKFLOW_TEMPLATES_PATH}}/check-taskfiles.yml" \
          "{{.WORKFLOW_TEMPLATES_PATH}}/check-yaml-task.yml" \
          "{{.WORKFLOW_TEMPLATES_PATH}}/sync-labels-npm.yml" \
          "{{.WORKFLOW_TEMPLATES_PATH}}/spell-check-task.yml" \
          "{{.WORKFLOW_TEMPLATES_PATH}}/test-python-poetry-task.yml" \
          "{{.WORKFLOWS_PATH}}"

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-workflows-task/Taskfile.yml
  ci:validate:
    desc: Validate GitHub Actions workflows against their JSON schema
    vars:
      # Source: https://github.com/SchemaStore/schemastore/blob/master/src/schemas/json/github-workflow.json
      WORKFLOW_SCHEMA_URL: https://json.schemastore.org/github-workflow
      WORKFLOW_SCHEMA_PATH:
        sh: task utility:mktemp-file TEMPLATE="workflow-schema-XXXXXXXXXX.json"
      WORKFLOWS_DATA_PATH: "./.github/workflows/*.{yml,yaml}"
      TEMPLATE_WORKFLOWS_DATA_PATH: "./workflow-templates/*.{yml,yaml}"
    deps:
      - task: npm:install-deps
    cmds:
      - |
        wget \
          --quiet \
          --output-document="{{.WORKFLOW_SCHEMA_PATH}}" \
          {{.WORKFLOW_SCHEMA_URL}}
      - |
        npx \
          --package=ajv-cli \
          --package=ajv-formats \
          ajv validate \
            --all-errors \
            --strict=false \
            -c ajv-formats \
            -s "{{.WORKFLOW_SCHEMA_PATH}}" \
            -d "{{.WORKFLOWS_DATA_PATH}}"
      - |
        npx \
          --package=ajv-cli \
          --package=ajv-formats \
          ajv validate \
            --all-errors \
            --strict=false \
            -c ajv-formats \
            -s "{{.WORKFLOW_SCHEMA_PATH}}" \
            -d "{{.TEMPLATE_WORKFLOWS_DATA_PATH}}"

  clang-format:check-config:
    desc: Check that ClangFormat configuration file matches effective tool configuration
    vars:
      WORKING_FOLDER:
        sh: |
          if [[ "{{.WORKING_FOLDER}}" == "" ]]; then
            # Generate a path
            task utility:mktemp-folder TEMPLATE="clang-format-check-config-XXXXXXXXXX"
          else
            # A path was specified via the command line
            echo "{{.WORKING_FOLDER}}"
          fi
      ACTUAL_CONFIGURATION_PATH: "{{.WORKING_FOLDER}}/actual/.clang-format"
      EXPECTED_CONFIGURATION_PATH: "{{.WORKING_FOLDER}}/expected/.clang-format"
    cmds:
      - |
        mkdir "{{.WORKING_FOLDER}}/actual"
        mkdir "{{.WORKING_FOLDER}}/expected"
        cp "{{.CLANG_FORMAT_CONFIGURATION_PATH}}" "{{.WORKING_FOLDER}}/actual/"
      - task: clang-format:dump-config
        vars:
          TARGET_PATH: "{{.WORKING_FOLDER}}/expected/.clang-format"
      - |
        cd "{{.WORKING_FOLDER}}"
        diff --color=always --unified "actual/.clang-format" "expected/.clang-format"

  # Check if ClangFormat is installed and the expected version
  clang-format:check-installed:
    run: when_changed
    vars:
      EXPECTED_CLANG_FORMAT_VERSION: "{{default .DEFAULT_CLANG_FORMAT_VERSION .CLANG_FORMAT_VERSION}}"
    cmds:
      - |
        if ! which clang-format &>/dev/null; then
          echo "clang-format not found or not in PATH."
          echo "Please install: https://github.com/arduino/clang-static-binaries/releases"
          exit 1
        fi
      - |
        INSTALLED_CLANG_FORMAT_VERSION_ARRAY=($(clang-format --version))
        INSTALLED_CLANG_FORMAT_VERSION="${INSTALLED_CLANG_FORMAT_VERSION_ARRAY[${#INSTALLED_CLANG_FORMAT_VERSION_ARRAY[@]}-1]}"
        if [[ "$INSTALLED_CLANG_FORMAT_VERSION" != "{{.EXPECTED_CLANG_FORMAT_VERSION}}" ]]; then
          echo "Installed version of clang-format does not match expected:"
          echo "Installed: $INSTALLED_CLANG_FORMAT_VERSION (at $(which clang-format))"
          echo "Expected: {{.EXPECTED_CLANG_FORMAT_VERSION}}"
          exit 1
        fi

  clang-format:check-output:
    desc: Compare actual vs expected output of ClangFormat
    vars:
      WORKING_FOLDER:
        sh: |
          if [[ "{{.WORKING_FOLDER}}" == "" ]]; then
            # Generate a path
            task utility:mktemp-folder TEMPLATE="clang-format-check-XXXXXXXXXX"
          else
            # A path was specified via the command line
            echo "{{.WORKING_FOLDER}}"
          fi
    deps:
      - task: clang-format:check-installed
    cmds:
      - |
        cp \
          --recursive \
          --target-directory="{{.WORKING_FOLDER}}" \
          "{{.CLANG_FORMAT_GOLDEN_TEST_DATA_FOLDER}}" \
          "{{.CLANG_FORMAT_INPUT_TEST_DATA_FOLDER}}"
      - task: clang-format:format
        vars:
          TARGET_FOLDER: "{{.WORKING_FOLDER}}/input/"
      - |
        # Give the folder an appropriate name to make the diff easier to understand
        mv "{{.WORKING_FOLDER}}/input/" "{{.WORKING_FOLDER}}/output/"
      - |
        cd "{{.WORKING_FOLDER}}"
        diff --color=always --recursive --unified "golden/" "output/"

  clang-format:check-testdata:
    desc: Check whether the targeted test data C++ code for the ClangFormat configuration is valid and correct
    cmds:
      - |
        if ! which g++ &>/dev/null; then
          echo "GCC not found or not in PATH."
          exit 1
        fi
      - |
        # Only the "targeted" test data is checked because the "samples" test data is not maintained in this repo.
        g++ \
          -fconcepts \
          -fsyntax-only \
          -I "{{.CLANG_FORMAT_TARGETED_INPUT_TEST_DATA_FOLDER}}/include" \
          -Wall \
          -Werror \
          -Wextra \
          "{{.CLANG_FORMAT_TARGETED_INPUT_TEST_DATA_FOLDER}}"/*.cpp

  clang-format:convert:
    desc: Convert the ClangFormat configuration file into the JavaScript object used by Arduino IDE 2.x
    vars:
      OUTPUT_PATH:
        sh: |
          if [[ "{{.OUTPUT_PATH}}" == "" ]]; then
            task utility:mktemp-file TEMPLATE="clang-format-js-object-XXXXXXXXXX.txt"
          else
            echo "{{.OUTPUT_PATH}}"
          fi
    deps:
      - task: npm:install-deps
    cmds:
      - |
        node \
          "{{.CLANG_FORMAT_CONFIGURATION_FOLDER}}/scripts/convert-clang-format-configuration.js" \
          "{{.CLANG_FORMAT_CONFIGURATION_PATH}}" \
          "{{.OUTPUT_PATH}}"

  # Write the effective ClangFormat configuration to the path specified by the TARGET_PATH variable
  clang-format:dump-config:
    deps:
      - task: clang-format:check-installed
    cmds:
      - |
        if ! which yq &>/dev/null; then
          echo "ec not found or not in PATH. Please install: https://github.com/mikefarah/yq/#install"
          exit 1
        fi

      - |
        # Add source comment
        echo \
          "# Source: https://github.com/arduino/tooling-project-assets/tree/main/other/clang-format-configuration" > \
            "{{.TARGET_PATH}}"

        # Dump the effective configuration to the target file
        clang-format \
          --dump-config \
          --style=file:"{{.CLANG_FORMAT_CONFIGURATION_PATH}}" >> \
            "{{.TARGET_PATH}}"

      - |
        # Correct invalid `BasedOnStyle` key value
        # The existing key is deleted before assigning it to a valid value in order to achieve consistent quoting style
        # (updating the empty string value in place causes the assigned value to be wrapped in quotes)
        yq --inplace 'del(.BasedOnStyle)' "{{.TARGET_PATH}}"
        yq --inplace '.BasedOnStyle = "LLVM"' "{{.TARGET_PATH}}"

      - |
        # Fix the inconsistent key order
        yq --inplace 'sort_keys(.)' "{{.TARGET_PATH}}"

  # Use ClangFormat to format the files under the path specified by TARGET_FOLDER recursively
  clang-format:format:
    cmds:
      - |
        find \
          "{{.TARGET_FOLDER}}" \
          \( \
            -name '*.c' -or \
            -name '*.cpp' -or \
            -name '*.h' -or \
            -name '*.ino' -or \
            -name '*.inot' -or \
            -name '*.ipp' -or \
            -name '*.tpp' -and \
            -type f \
          \) \
          -exec \
            clang-format \
              --assume-filename=foo.cpp \
              -i \
              --style=file:"{{.CLANG_FORMAT_CONFIGURATION_PATH}}" \
              {} \;

  # Print the standard version of ClangFormat for current use
  clang-format:get-version:
    cmds:
      - echo "{{.DEFAULT_CLANG_FORMAT_VERSION}}"

  clang-format:update-config:
    desc: Update ClangFormat configuration file to match effective tool configuration
    vars:
      WORKING_PATH:
        sh: task utility:mktemp-file TEMPLATE="clang-format-update-config-XXXXXXXXXX.json"
    cmds:
      - task: clang-format:dump-config
        vars:
          TARGET_PATH: "{{.WORKING_PATH}}"
      - mv --force "{{.WORKING_PATH}}" "{{.CLANG_FORMAT_CONFIGURATION_PATH}}"

  clang-format:update-golden:
    desc: Update golden master test data for current configuration
    deps:
      - task: clang-format:check-installed
    cmds:
      - rm --recursive "{{.CLANG_FORMAT_GOLDEN_TEST_DATA_FOLDER}}/"
      - cp --recursive "{{.CLANG_FORMAT_INPUT_TEST_DATA_FOLDER}}/" "{{.CLANG_FORMAT_GOLDEN_TEST_DATA_FOLDER}}/"
      - task: clang-format:format
        vars:
          TARGET_FOLDER: "{{.CLANG_FORMAT_GOLDEN_TEST_DATA_FOLDER}}/"

  clang-format:validate:
    desc: Validate ClangFormat configuration file against its JSON schema
    vars:
      # Source: https://github.com/SchemaStore/schemastore/blob/master/src/schemas/json/clang-format.json
      SCHEMA_URL: https://json.schemastore.org/clang-format.json
      SCHEMA_PATH:
        sh: task utility:mktemp-file TEMPLATE="clang-format-configuration-schema-XXXXXXXXXX.json"
      DATA_SOURCE_PATH: "{{.CLANG_FORMAT_CONFIGURATION_PATH}}"
      # ajv-cli identifies YAML-format data files by their file extension, so renaming is required:
      # https://github.com/ajv-validator/ajv-cli/issues/117
      DATA_PATH:
        sh: task utility:mktemp-file TEMPLATE=".clang-format-XXXXXXXXXX.yml"
    deps:
      - task: npm:install-deps
    cmds:
      - wget --quiet --output-document="{{.SCHEMA_PATH}}" {{.SCHEMA_URL}}
      - cp "{{.DATA_SOURCE_PATH}}" "{{.DATA_PATH}}"
      - |
        npx \
          --package=ajv-cli \
          --package=ajv-formats \
          ajv validate \
            --all-errors \
            -c ajv-formats \
            -s "{{.SCHEMA_PATH}}" \
            -d "{{.DATA_PATH}}"

  config:sync:
    desc: Sync configuration files from templates
    vars:
      REPOSITORY_ROOT_PATH: "./"
      WORKFLOW_TEMPLATE_ASSETS_PATH: "./workflow-templates/assets"
    cmds:
      - |
        cp \
          "{{.WORKFLOW_TEMPLATE_ASSETS_PATH}}/check-javascript/.eslintrc.yml" \
          "{{.WORKFLOW_TEMPLATE_ASSETS_PATH}}/check-prettier-formatting/toml/.prettierrc.yml" \
          "{{.WORKFLOW_TEMPLATE_ASSETS_PATH}}/general/.editorconfig" \
          "{{.WORKFLOW_TEMPLATE_ASSETS_PATH}}/check-python/.flake8" \
          "{{.WORKFLOW_TEMPLATE_ASSETS_PATH}}/check-markdown/.markdownlint.yml" \
          "{{.WORKFLOW_TEMPLATE_ASSETS_PATH}}/npm/.npmrc" \
          "{{.REPOSITORY_ROOT_PATH}}"

  dependabot:validate:
    desc: Validate Dependabot configuration files against their JSON schema
    deps:
      - task: npm:install-deps
    vars:
      # Source: https://github.com/SchemaStore/schemastore/blob/master/src/schemas/json/dependabot-2.0.json
      SCHEMA_URL: https://json.schemastore.org/dependabot-2.0
      SCHEMA_PATH:
        sh: task utility:mktemp-file TEMPLATE="dependabot-schema-XXXXXXXXXX.json"
      # Source: https://github.com/SchemaStore/schemastore/blob/master/src/schemas/json/base.json
      BASE_SCHEMA_URL: https://json.schemastore.org/base.json
      BASE_SCHEMA_PATH:
        sh: task utility:mktemp-file TEMPLATE="base-schema-XXXXXXXXXX.json"
      # The Dependabot configuration file for the repository.
      DATA_PATH: ".github/dependabot.yml"
      # The asset Dependabot configuration files.
      ASSETS_DATA_PATH: "workflow-templates/assets/dependabot/**/dependabot.yml"
    cmds:
      - wget --quiet --output-document="{{.SCHEMA_PATH}}" {{.SCHEMA_URL}}
      - wget --quiet --output-document="{{.BASE_SCHEMA_PATH}}" {{.BASE_SCHEMA_URL}}
      - |
        npx \
          --package=ajv-cli \
          --package=ajv-formats \
          ajv validate \
            --all-errors \
            --strict=false \
            -s "{{.SCHEMA_PATH}}" \
            -r "{{.BASE_SCHEMA_PATH}}" \
            -d "{{.DATA_PATH}}"
      - |
        npx \
          --package=ajv-cli \
          --package=ajv-formats \
          ajv validate \
            --all-errors \
            --strict=false \
            -s "{{.SCHEMA_PATH}}" \
            -r "{{.BASE_SCHEMA_PATH}}" \
            -d "{{.ASSETS_DATA_PATH}}"

  docs:generate:
    desc: Create all generated documentation content
    # This is an "umbrella" task used to call any documentation generation processes the project has.
    # It can be left empty if there are none.

  eslint:validate:
    desc: Validate ESLint configuration file against its JSON schema
    deps:
      - task: npm:install-deps
    vars:
      # Source: https://github.com/SchemaStore/schemastore/blob/master/src/schemas/json/eslintrc.json
      SCHEMA_URL: https://json.schemastore.org/eslintrc.json
      SCHEMA_PATH:
        sh: task utility:mktemp-file TEMPLATE="eslintrc-schema-XXXXXXXXXX.json"
      # Source: https://github.com/SchemaStore/schemastore/blob/master/src/schemas/json/partial-eslint-plugins.json
      PARTIAL_ESLINT_PLUGINS_SCHEMA_URL: https://json.schemastore.org/partial-eslint-plugins.json
      PARTIAL_ESLINT_PLUGINS_PATH:
        sh: task utility:mktemp-file TEMPLATE="partial-eslint-plugins-schema-XXXXXXXXXX.json"
      DATA_PATH: workflow-templates/assets/check-javascript/.eslintrc.yml
      # ajv-cli identifies YAML-format data files by their file extension, so renaming is required:
      # https://github.com/ajv-validator/ajv-cli/issues/117
    cmds:
      - wget --quiet --output-document="{{.SCHEMA_PATH}}" {{.SCHEMA_URL}}
      - wget --quiet --output-document="{{.PARTIAL_ESLINT_PLUGINS_PATH}}" {{.PARTIAL_ESLINT_PLUGINS_SCHEMA_URL}}
      - |
        npx \
          --package=ajv-cli \
          --package=ajv-formats \
          ajv validate \
            --all-errors \
            --strict=false \
            -s "{{.SCHEMA_PATH}}" \
            -r "{{.PARTIAL_ESLINT_PLUGINS_PATH}}" \
            -d "{{.DATA_PATH}}"

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-files-task/Taskfile.yml
  general:check-filenames:
    desc: Check for non-portable filenames
    cmds:
      - |
        find . \
          -type d -name '.git' -prune -o \
          -type d -name '.licenses' -prune -o \
          -type d -name '__pycache__' -prune -o \
          -type d -name 'node_modules' -prune -o \
          -exec \
            sh \
              -c \
                ' \
                  basename "$0" | \
                    grep \
                      --extended-regexp \
                      --regexp='"'"'([<>:"/\\|?*'"'"'"$(printf "\001-\037")"'"'"'])|(.+\.$)'"'"' \
                      --silent \
                  && \
                  echo "$0"
                ' \
              '{}' \
            \; \
          -execdir \
            false \
            '{}' \
            + \
        || \
        {
          echo
          echo "Prohibited characters found in filenames"
          echo "See:"
          echo "https://learn.microsoft.com/en-us/windows/win32/fileio/naming-a-file#naming-conventions:~:text=except%20for%20the%20following"
          false
        }
      - |
        find . \
          -type d -name '.git' -prune -o \
          -type d -name '.licenses' -prune -o \
          -type d -name '__pycache__' -prune -o \
          -type d -name 'node_modules' -prune -o \
          -exec \
            sh \
              -c \
                ' \
                  basename "$0" | \
                    grep \
                      --ignore-case \
                      --extended-regexp \
                      --regexp='"'"'^(con|prn|aux|nul|com[0-9]+|lpt[0-9]+)$'"'"' \
                      --silent \
                  && \
                  echo "$0"
                ' \
              '{}' \
            \; \
          -execdir \
            false \
            '{}' \
            + \
        || \
        {
          echo
          echo "Reserved filenames found"
          echo "See:"
          echo "https://learn.microsoft.com/en-us/windows/win32/fileio/naming-a-file#naming-conventions:~:text=use%20the%20following-,reserved%20names,-for%20the%20name"
          false
        }

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-general-formatting-task/Taskfile.yml
  general:check-formatting:
    desc: Check basic formatting style of all files
    cmds:
      - |
        if ! which ec &>/dev/null; then
          echo "ec not found or not in PATH. Please install: https://github.com/editorconfig-checker/editorconfig-checker#installation"
          exit 1
        fi
      - ec

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/spell-check-task/Taskfile.yml
  general:check-spelling:
    desc: Check for commonly misspelled words
    deps:
      - task: poetry:install-deps
        vars:
          POETRY_GROUPS: dev
    cmds:
      - poetry run codespell

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-files-task/Taskfile.yml
  general:check-symlinks:
    desc: Check for bad symlinks
    cmds:
      - |
        find . \
          -type d -name '.git' -prune -o \
          -type d -name '.licenses' -prune -o \
          -type d -name '__pycache__' -prune -o \
          -type d -name 'node_modules' -prune -o \
          -type l \
          -execdir \
            test ! -e '{}' \
            \; \
          -exec \
            echo '{}' \
            \; \
          -execdir \
            false \
            '{}' \
            + \
        || \
        {
          echo 'Broken or circular symlink found'
          false
        }

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/spell-check-task/Taskfile.yml
  general:correct-spelling:
    desc: Correct commonly misspelled words where possible
    deps:
      - task: poetry:install-deps
        vars:
          POETRY_GROUPS: dev
    cmds:
      - poetry run codespell --write-changes

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-prettier-formatting-task/Taskfile.yml
  general:format-prettier:
    desc: Format all supported files with Prettier
    deps:
      - task: npm:install-deps
    cmds:
      - npx prettier --write .

  github:sync:
    desc: Sync GitHub community health files
    vars:
      DOCUMENTATION_INSTALLATION_PATH: "./docs"
      DOCUMENTATION_TEMPLATES_PATH: "./documentation-templates"
      ISSUE_TEMPLATES_INSTALLATION_PATH: "./.github/ISSUE_TEMPLATE"
      ISSUE_TEMPLATES_PATH: "./issue-templates"
    cmds:
      - |
        cp \
          "{{.DOCUMENTATION_TEMPLATES_PATH}}/contributor-guide/general/CONTRIBUTING.md" \
          "{{.DOCUMENTATION_INSTALLATION_PATH}}"
      - |
        cp \
          "{{.DOCUMENTATION_TEMPLATES_PATH}}/contributor-guide/general/contributor-guide/assets/"* \
          "{{.DOCUMENTATION_INSTALLATION_PATH}}/contributor-guide/assets/"
      - |
        cp \
          "{{.ISSUE_TEMPLATES_PATH}}/minimal/bug-report.md" \
          "{{.ISSUE_TEMPLATES_PATH}}/minimal/feature-request.md" \
          "{{.ISSUE_TEMPLATES_INSTALLATION_PATH}}"

  issue-form:validate:
    desc: Validate GitHub issue form configuration files against their JSON schema
    vars:
      # Source: https://github.com/SchemaStore/schemastore/blob/master/src/schemas/json/github-issue-forms.json
      SCHEMA_URL: https://json.schemastore.org/github-issue-forms.json
      SCHEMA_PATH:
        sh: task utility:mktemp-file TEMPLATE="github-issue-forms-schema-XXXXXXXXXX.json"
      DATA_PATH: "issue-templates/forms/**/*.{yml,yaml}"
    deps:
      - task: npm:install-deps
    cmds:
      - wget --quiet --output-document="{{.SCHEMA_PATH}}" {{.SCHEMA_URL}}
      - |
        npx \
          --package=ajv-cli \
          --package=ajv-formats \
          ajv validate \
            --all-errors \
            -c ajv-formats \
            -s "{{.SCHEMA_PATH}}" \
            -d "{{.DATA_PATH}}"

  js:fix:
    desc: Fix JavaScript code linting violations
    deps:
      - task: npm:install-deps
    cmds:
      - npx eslint --ext .js,.jsx --fix .

  js:lint:
    desc: Lint JavaScript code
    deps:
      - task: npm:install-deps
    cmds:
      - npx eslint --ext .js,.jsx .

  labels:validate:
    desc: Validate GitHub repository label configuration files against their JSON schema
    vars:
      SCHEMA_PATH: workflow-templates/assets/sync-labels/arduino-tooling-gh-label-configuration-schema.json
      DATA_PATH: "workflow-templates/assets/sync-labels/*.{yml,yaml}"
    deps:
      - task: npm:install-deps
    cmds:
      - |
        npx \
          --package=ajv-cli \
          --package=ajv-formats \
          ajv validate \
            --all-errors \
            --strict=false \
            -c ajv-formats \
            -s "{{.SCHEMA_PATH}}" \
            -d "{{.DATA_PATH}}"

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-markdown-task/Taskfile.yml
  markdown:check-links:
    desc: Check for broken links
    vars:
      # The command is defined in a Taskfile variable to allow it to be broken into multiple lines for readability.
      # This can't be done in the `cmd` object of the Taskfile because `npx --call` uses the native shell, which causes
      # standard newline escaping syntax to not work when the task is run on Windows.
      #
      # Using -regex instead of -name to avoid Task's behavior of globbing even when quoted on Windows
      # The odd method for escaping . in the regex is required for windows compatibility because mvdan.cc/sh gives
      # \ characters special treatment on Windows in an attempt to support them as path separators.
      #
      # prettier-ignore
      CHECK_LINKS_COMMAND:
        "
          find . \
            -type d -name \".git\" -prune -o \
            -type d -name \".licenses\" -prune -o \
            -type d -name \"__pycache__\" -prune -o \
            -type d -name \"node_modules\" -prune -o \
            -path \"./{{.CLANG_FORMAT_GOLDEN_TEST_DATA_FOLDER}}/samples\" -prune -o \
            -path \"./{{.CLANG_FORMAT_INPUT_TEST_DATA_FOLDER}}/samples\" -prune -o \
            -regex \".*[.]md\" \
            -exec \
              markdown-link-check \
                --quiet \
                --config \"./.markdown-link-check.json\" \
                \\{\\} \
                +
        "
    deps:
      - task: docs:generate
      - task: npm:install-deps
    cmds:
      - |
        npx \
          --package=markdown-link-check \
          --call='{{.CHECK_LINKS_COMMAND}}'

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-markdown-task/Taskfile.yml
  markdown:fix:
    desc: Automatically correct linting violations in Markdown files where possible
    deps:
      - task: npm:install-deps
    cmds:
      - npx markdownlint-cli --fix "**/*.md"

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-markdown-task/Taskfile.yml
  markdown:lint:
    desc: Check for problems in Markdown files
    deps:
      - task: npm:install-deps
    cmds:
      - npx markdownlint-cli "**/*.md"

  markdownlint:validate:
    desc: Validate markdownlint configuration files against their JSON schema
    vars:
      # Source: https://github.com/DavidAnson/markdownlint/blob/main/schema/markdownlint-config-schema.json
      SCHEMA_URL: https://raw.githubusercontent.com/DavidAnson/markdownlint/main/schema/markdownlint-config-schema.json
      SCHEMA_PATH:
        sh: task utility:mktemp-file TEMPLATE="markdownlint-schema-XXXXXXXXXX.json"
      DATA_PATH: "workflow-templates/assets/check-markdown/.markdownlint.yml"
    deps:
      - task: npm:install-deps
    cmds:
      - wget --quiet --output-document="{{.SCHEMA_PATH}}" {{.SCHEMA_URL}}
      - |
        npx \
          --package=ajv-cli \
          --package=ajv-formats \
          ajv validate \
            --all-errors \
            --strict=false \
            --allow-union-types \
            -c ajv-formats \
            -s "{{.SCHEMA_PATH}}" \
            -d "{{.DATA_PATH}}"

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/npm-task/Taskfile.yml
  npm:install-deps:
    desc: |
      Install dependencies managed by npm.
      Environment variable parameters:
      - PROJECT_PATH: Path of the npm-managed project (default: "./").
    run: when_changed
    dir: |
      "{{default "./" .PROJECT_PATH}}"
    cmds:
      - npm install

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-npm-task/Taskfile.yml
  npm:fix-config:
    desc: |
      Fix problems with the npm configuration file.
      Environment variable parameters:
      - PROJECT_PATH: Path of the npm-managed project (default: {{.DEFAULT_NPM_PROJECT_PATH}}).
    dir: |
      "{{default "./" .PROJECT_PATH}}"
    cmds:
      - |
        npm \
          config \
            --location project \
            fix

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-npm-task/Taskfile.yml
  npm:validate:
    desc: |
      Validate npm configuration files against their JSON schema.
      Environment variable parameters:
      - PROJECT_PATH: Path of the npm-managed project (default: "./").
    deps:
      - task: npm:install-deps
    vars:
      # Source: https://github.com/SchemaStore/schemastore/blob/master/src/schemas/json/package.json
      SCHEMA_URL: https://json.schemastore.org/package.json
      SCHEMA_PATH:
        sh: task utility:mktemp-file TEMPLATE="package-json-schema-XXXXXXXXXX.json"
      # Source: https://github.com/SchemaStore/schemastore/blob/master/src/schemas/json/ava.json
      AVA_SCHEMA_URL: https://json.schemastore.org/ava.json
      AVA_SCHEMA_PATH:
        sh: task utility:mktemp-file TEMPLATE="ava-schema-XXXXXXXXXX.json"
      # Source: https://github.com/SchemaStore/schemastore/blob/master/src/schemas/json/base.json
      BASE_SCHEMA_URL: https://json.schemastore.org/base.json
      BASE_SCHEMA_PATH:
        sh: task utility:mktemp-file TEMPLATE="base-schema-XXXXXXXXXX.json"
      # Source: https://github.com/SchemaStore/schemastore/blob/master/src/schemas/json/eslintrc.json
      ESLINTRC_SCHEMA_URL: https://json.schemastore.org/eslintrc.json
      ESLINTRC_SCHEMA_PATH:
        sh: task utility:mktemp-file TEMPLATE="eslintrc-schema-XXXXXXXXXX.json"
      # Source: https://github.com/SchemaStore/schemastore/blob/master/src/schemas/json/jscpd.json
      JSCPD_SCHEMA_URL: https://json.schemastore.org/jscpd.json
      JSCPD_SCHEMA_PATH:
        sh: task utility:mktemp-file TEMPLATE="jscpd-schema-XXXXXXXXXX.json"
      # Source: https://github.com/SchemaStore/schemastore/blob/master/src/schemas/json/npm-badges.json
      NPM_BADGES_SCHEMA_URL: https://json.schemastore.org/npm-badges.json
      NPM_BADGES_SCHEMA_PATH:
        sh: task utility:mktemp-file TEMPLATE="npm-badges-schema-XXXXXXXXXX.json"
      # Source: https://github.com/SchemaStore/schemastore/blob/master/src/schemas/json/partial-eslint-plugins.json
      PARTIAL_ESLINT_PLUGINS_SCHEMA_URL: https://json.schemastore.org/partial-eslint-plugins.json
      PARTIAL_ESLINT_PLUGINS_PATH:
        sh: task utility:mktemp-file TEMPLATE="partial-eslint-plugins-schema-XXXXXXXXXX.json"
      # Source: https://github.com/SchemaStore/schemastore/blob/master/src/schemas/json/prettierrc.json
      PRETTIERRC_SCHEMA_URL: https://json.schemastore.org/prettierrc.json
      PRETTIERRC_SCHEMA_PATH:
        sh: task utility:mktemp-file TEMPLATE="prettierrc-schema-XXXXXXXXXX.json"
      # Source: https://github.com/SchemaStore/schemastore/blob/master/src/schemas/json/semantic-release.json
      SEMANTIC_RELEASE_SCHEMA_URL: https://json.schemastore.org/semantic-release.json
      SEMANTIC_RELEASE_SCHEMA_PATH:
        sh: task utility:mktemp-file TEMPLATE="semantic-release-schema-XXXXXXXXXX.json"
      # Source: https://github.com/SchemaStore/schemastore/blob/master/src/schemas/json/stylelintrc.json
      STYLELINTRC_SCHEMA_URL: https://json.schemastore.org/stylelintrc.json
      STYLELINTRC_SCHEMA_PATH:
        sh: task utility:mktemp-file TEMPLATE="stylelintrc-schema-XXXXXXXXXX.json"
      INSTANCE_PATH: >-
        {{default "." .PROJECT_PATH}}/package.json
    cmds:
      - wget --quiet --output-document="{{.SCHEMA_PATH}}" {{.SCHEMA_URL}}
      - wget --quiet --output-document="{{.AVA_SCHEMA_PATH}}" {{.AVA_SCHEMA_URL}}
      - wget --quiet --output-document="{{.BASE_SCHEMA_PATH}}" {{.BASE_SCHEMA_URL}}
      - wget --quiet --output-document="{{.ESLINTRC_SCHEMA_PATH}}" {{.ESLINTRC_SCHEMA_URL}}
      - wget --quiet --output-document="{{.JSCPD_SCHEMA_PATH}}" {{.JSCPD_SCHEMA_URL}}
      - wget --quiet --output-document="{{.NPM_BADGES_SCHEMA_PATH}}" {{.NPM_BADGES_SCHEMA_URL}}
      - wget --quiet --output-document="{{.PARTIAL_ESLINT_PLUGINS_PATH}}" {{.PARTIAL_ESLINT_PLUGINS_SCHEMA_URL}}
      - wget --quiet --output-document="{{.PRETTIERRC_SCHEMA_PATH}}" {{.PRETTIERRC_SCHEMA_URL}}
      - wget --quiet --output-document="{{.SEMANTIC_RELEASE_SCHEMA_PATH}}" {{.SEMANTIC_RELEASE_SCHEMA_URL}}
      - wget --quiet --output-document="{{.STYLELINTRC_SCHEMA_PATH}}" {{.STYLELINTRC_SCHEMA_URL}}
      - |
        npx \
          --package=ajv-cli \
          --package=ajv-formats \
          ajv validate \
            --all-errors \
            --strict=false \
            -s "{{.SCHEMA_PATH}}" \
            -r "{{.AVA_SCHEMA_PATH}}" \
            -r "{{.BASE_SCHEMA_PATH}}" \
            -r "{{.ESLINTRC_SCHEMA_PATH}}" \
            -r "{{.JSCPD_SCHEMA_PATH}}" \
            -r "{{.NPM_BADGES_SCHEMA_PATH}}" \
            -r "{{.PARTIAL_ESLINT_PLUGINS_PATH}}" \
            -r "{{.PRETTIERRC_SCHEMA_PATH}}" \
            -r "{{.SEMANTIC_RELEASE_SCHEMA_PATH}}" \
            -r "{{.STYLELINTRC_SCHEMA_PATH}}" \
            -d "{{.INSTANCE_PATH}}"

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/poetry-task/Taskfile.yml
  poetry:install:
    desc: Install Poetry
    run: when_changed
    cmds:
      - |
        if ! which yq &>/dev/null; then
          echo "yq not found or not in PATH."
          echo "Please install: https://github.com/mikefarah/yq/#install"
          exit 1
        fi
      - |
        if ! which python &>/dev/null; then
        python_constraint="$( \
            yq \
              --input-format toml \
              --output-format yaml \
              '.tool.poetry.dependencies.python' \
              < pyproject.toml
          )"

          echo "Python not found or not in PATH."
          echo "Please install a version of Python satisfying the constraint ${python_constraint}:"
          echo "https://wiki.python.org/moin/BeginnersGuide/Download"
          exit 1
        fi
      - |
        if ! which pipx &>/dev/null; then
          echo "pipx not found or not in PATH."
          echo "Please install: https://pipx.pypa.io/stable/installation/#installing-pipx"
          exit 1
        fi
      - |
        export PIPX_DEFAULT_PYTHON="$( \
          task utility:normalize-path \
            RAW_PATH="$(which python)" \
        )"

        poetry_constraint="$( \
            yq \
              --input-format toml \
              --output-format yaml \
              '.tool.poetry.group.pipx.dependencies.poetry' \
              < pyproject.toml
          )"

        pipx install \
          --force \
          "poetry==$poetry_constraint"

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/poetry-task/Taskfile.yml
  poetry:install-deps:
    desc: |
      Install dependencies managed by Poetry.
      Environment variable parameters:
      - POETRY_GROUPS: Poetry dependency groups to install (default: install all dependencies).
    run: when_changed
    deps:
      - task: poetry:install
    cmds:
      - |
        poetry install \
          {{if .POETRY_GROUPS}} --only {{.POETRY_GROUPS}} {{end}}

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-poetry-task/Taskfile.yml
  poetry:sync:
    desc: Sync Poetry lockfile
    deps:
      - task: poetry:install
    cmds:
      - |
        poetry lock \
          --no-cache

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/poetry-task/Taskfile.yml
  poetry:update-deps:
    desc: Update all dependencies managed by Poetry to their newest versions
    deps:
      - task: poetry:install
    cmds:
      - poetry update

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-poetry-task/Taskfile.yml
  poetry:validate:
    desc: Validate Poetry configuration
    deps:
      - task: poetry:install
    cmds:
      - |
        poetry check \
          --lock \
          --strict

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-python-task/Taskfile.yml
  python:format:
    desc: Format Python files
    deps:
      - task: poetry:install-deps
        vars:
          POETRY_GROUPS: dev
    cmds:
      - poetry run black .

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-python-task/Taskfile.yml
  python:lint:
    desc: Lint Python code
    deps:
      - task: poetry:install-deps
        vars:
          POETRY_GROUPS: dev
    cmds:
      - poetry run flake8 --show-source

  python:test:
    desc: Run Python tests
    deps:
      - task: poetry:install-deps
    cmds:
      - poetry run pytest workflow-templates/assets/deploy-mkdocs-versioned/siteversion/tests

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-shell-task/Taskfile.yml
  shell:check:
    desc: |
      Check for problems with shell scripts.
      Environment variable parameters:
      - SCRIPT_PATH: path of the script to be checked.
    cmds:
      - |
        if [[ "{{.SCRIPT_PATH}}" == "" ]]; then
          echo "Path to script file must be passed to this task via the SCRIPT_PATH taskfile variable."
          echo "See: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/check-shell-task.md#usage"
          exit 1
        fi
      - |
        if ! which shellcheck &>/dev/null; then
          echo "shellcheck not installed or not in PATH."
          echo "Please install: https://github.com/koalaman/shellcheck#installing"
          exit 1
        fi
      - |
        shellcheck \
          --format={{default "tty" .SHELLCHECK_FORMAT}} \
          "{{.SCRIPT_PATH}}"

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-shell-task/Taskfile.yml
  shell:check-mode:
    desc: |
      Check for non-executable shell scripts.
      Environment variable parameters:
      - SCRIPT_PATH: path of the script to be checked.
    cmds:
      - |
        if [[ "{{.SCRIPT_PATH}}" == "" ]]; then
          echo "Path to script file must be passed to this task via the SCRIPT_PATH taskfile variable."
          echo "See: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/check-shell-task.md#usage"
          exit 1
        fi
      - |
        test -x "{{.SCRIPT_PATH}}"

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-shell-task/Taskfile.yml
  shell:format:
    desc: |
      Format shell script files.
      Environment variable parameters:
      - SCRIPT_PATH: path of the script to be formatted.
    cmds:
      - |
        if [[ "{{.SCRIPT_PATH}}" == "" ]]; then
          echo "Path to script file must be passed to this task via the SCRIPT_PATH taskfile variable."
          echo "See: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/check-shell-task.md#usage"
          exit 1
        fi
      - |
        if ! which shfmt &>/dev/null; then
          echo "shfmt not installed or not in PATH. Please install: https://github.com/mvdan/sh#shfmt"
          exit 1
        fi
      - shfmt -w "{{.SCRIPT_PATH}}"

  # Make a temporary file and print the path passed to stdout.
  # Environment variable parameters:
  # - TEMPLATE: template for the format of the filename.
  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/windows-task/Taskfile.yml
  utility:mktemp-file:
    vars:
      RAW_PATH:
        sh: mktemp --tmpdir "{{.TEMPLATE}}"
    cmds:
      - task: utility:normalize-path
        vars:
          RAW_PATH: "{{.RAW_PATH}}"

  # Make a temporary folder named according to the passed TEMPLATE variable and print the path passed to stdout
  utility:mktemp-folder:
    vars:
      RAW_PATH:
        sh: mktemp --directory --tmpdir "{{.TEMPLATE}}"
    cmds:
      - task: utility:normalize-path
        vars:
          RAW_PATH: "{{.RAW_PATH}}"

  # Print a normalized version of the path to stdout.
  # Environment variable parameters:
  # - RAW_PATH: the path to be normalized.
  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/windows-task/Taskfile.yml
  utility:normalize-path:
    cmds:
      - |
        if [[ "{{.OS}}" == "Windows_NT" ]] && which cygpath &>/dev/null; then
            # Even though the shell handles POSIX format absolute paths as expected, external applications do not.
            # So paths passed to such applications must first be converted to Windows format.
            cygpath -w "{{.RAW_PATH}}"
        else
          echo "{{.RAW_PATH}}"
        fi

  # Environment variable parameters:
  # - YAMLLINT_FORMAT: yamllint output format (default: colored).
  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-yaml-task/Taskfile.yml
  yaml:lint:
    desc: Check for problems with YAML files
    deps:
      - task: poetry:install-deps
        vars:
          POETRY_GROUPS: dev
    cmds:
      - poetry run yamllint --format {{default "colored" .YAMLLINT_FORMAT}} .
